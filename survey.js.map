{"version":3,"file":"survey.js","sourceRoot":"","sources":["src/survey.ts"],"names":[],"mappings":"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","sourcesContent":["import {LitElement, html, css} from 'lit';\r\nimport {customElement, property, state} from 'lit/decorators.js';\r\n\r\n/**\r\n * A survey component that loads questions from a CSV file.\r\n */\r\n@customElement('survey-component')\r\nexport class SurveyComponent extends LitElement {\r\n  static override styles = css`\r\n  :host {\r\n    display: block;\r\n    padding: 16px;\r\n    max-width: 800px;\r\n    background-color: #f0f8ff; /* Alice Blue */\r\n    font-family: 'Arial', sans-serif;\r\n    color: #333;\r\n    box-sizing: border-box;\r\n  }\r\n  form {\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n  }\r\n  label {\r\n    margin: 12px 0 6px;\r\n    font-size: 1.2em;\r\n    color: #2e8b57; /* Sea Green */\r\n  }\r\n  input {\r\n    margin-bottom: 16px;\r\n    padding: 8px;\r\n    border: 1px solid #ccc;\r\n    border-radius: 4px;\r\n    font-size: 1em;\r\n    width: 80%;\r\n  }\r\n  input:focus {\r\n    outline: none;\r\n    border-color: #2e8b57; /* Sea Green */\r\n    box-shadow: 0 0 5px rgba(46, 139, 87, 0.5);\r\n  }\r\n  button {\r\n    padding: 12px 24px;\r\n    background-color: #2e8b57; /* Sea Green */\r\n    color: white;\r\n    border: none;\r\n    border-radius: 4px;\r\n    cursor: pointer;\r\n    font-size: 1.1em;\r\n    margin-top: 20px;\r\n    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\r\n  }\r\n  button:disabled {\r\n    background-color: #ccc; /* Disabled button color */\r\n    cursor: not-allowed;\r\n    box-shadow: none;\r\n  }\r\n  button:hover:enabled {\r\n    background-color: #3cb371; /* Medium Sea Green */\r\n  }\r\n  .modal {\r\n    display: none;\r\n    position: fixed;\r\n    z-index: 1;\r\n    left: 0;\r\n    top: 0;\r\n    width: 100%;\r\n    height: 100%;\r\n    overflow: auto;\r\n    background-color: rgba(0, 0, 0, 0.4);\r\n  }\r\n  .modal-content {\r\n    background-color: #fefefe;\r\n    margin: 10% auto;\r\n    padding: 30px;\r\n    border: 1px solid #888;\r\n    width: 80%;\r\n    max-width: 800px;\r\n    text-align: center;\r\n    border-radius: 10px;\r\n    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);\r\n  }\r\n  .loader {\r\n    border: 16px solid #f3f3f3;\r\n    border-radius: 50%;\r\n    border-top: 16px solid #3498db;\r\n    width: 60px;\r\n    height: 60px;\r\n    animation: spin 2s linear infinite;\r\n    margin: 20px auto;\r\n  }\r\n  @keyframes spin {\r\n    0% { transform: rotate(0deg); }\r\n    100% { transform: rotate(360deg); }\r\n  }\r\n  .print-button, .new-survey-button {\r\n    padding: 12px 24px;\r\n    background-color: #2e8b57; /* Sea Green */\r\n    color: white;\r\n    border: none;\r\n    border-radius: 4px;\r\n    cursor: pointer;\r\n    font-size: 1.1em;\r\n    margin-top: 20px;\r\n    display: none; /* Initially hidden */\r\n    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\r\n  }\r\n  .print-button.show, .new-survey-button.show {\r\n    display: inline-block; /* Show when the class is added */\r\n  }\r\n  .print-button:hover, .new-survey-button:hover {\r\n    background-color: #3cb371; /* Medium Sea Green */\r\n  }\r\n  .score {\r\n    display: none;\r\n    margin-top: 20px;\r\n    font-size: 1.2em;\r\n    color: #2e8b57; /* Sea Green */\r\n  }\r\n  .score.show {\r\n    display: block;\r\n  }\r\n  @media print {\r\n    .score {\r\n      display: block;\r\n      margin-bottom: 20px;\r\n      font-size: 1.4em;\r\n      color: #2e8b57; /* Sea Green */\r\n    }\r\n  }\r\n\r\n  /* Tablet-first styles */\r\n  @media (min-width: 768px) {\r\n    :host {\r\n      padding: 24px;\r\n    }\r\n    label {\r\n      font-size: 1.4em;\r\n    }\r\n    input {\r\n      font-size: 1.2em;\r\n      width: 90%; /* Increased width for tablets */\r\n    }\r\n    button {\r\n      font-size: 1.2em;\r\n    }\r\n  }\r\n\r\n  /* Desktop styles */\r\n  @media (min-width: 1024px) {\r\n    :host {\r\n      padding: 32px;\r\n    }\r\n    label {\r\n      font-size: 1.6em;\r\n    }\r\n    input {\r\n      font-size: 1.4em;\r\n      width: 80%; /* Adjusted width for desktops */\r\n    }\r\n    button {\r\n      font-size: 1.4em;\r\n    }\r\n  }\r\n`;\r\n\r\n  @property({type: Array})\r\n  questions: string[] = [];\r\n\r\n  @state()\r\n  allAnswered: boolean = false;\r\n\r\n  @state()\r\n  score: number = 0;\r\n\r\n  constructor() {\r\n    super();\r\n    this.loadQuestions();\r\n  }\r\n\r\n  async loadQuestions() {\r\n    const response = await fetch('/data/questions.csv');\r\n    const text = await response.text();\r\n    this.questions = this.parseCSV(text);\r\n  }\r\n\r\n  parseCSV(text: string): string[] {\r\n    const lines: string[] = text.split('\\n');\r\n    return lines.slice(1).map(line => line.split(',')[0]);\r\n  }\r\n\r\n  checkAnswers() {\r\n    const inputs = this.shadowRoot!.querySelectorAll('input');\r\n    this.allAnswered = Array.from(inputs).every(input => input.value.trim() !== '');\r\n  }\r\n\r\n  showModal() {\r\n    const modal = this.shadowRoot!.getElementById('myModal') as HTMLElement;\r\n    const scoreMessage = this.shadowRoot!.getElementById('scoreMessage') as HTMLElement;\r\n    const loader = this.shadowRoot!.querySelector('.loader') as HTMLElement;\r\n    const printButton = this.shadowRoot!.querySelector('.print-button') as HTMLElement;\r\n    const newSurveyButton = this.shadowRoot!.querySelector('.new-survey-button') as HTMLElement;\r\n    const scoreElement = this.shadowRoot!.querySelector('.score') as HTMLElement;\r\n    modal.style.display = 'block';\r\n    scoreMessage.textContent = '';\r\n    loader.style.display = 'block';\r\n    printButton.classList.remove('show');\r\n    newSurveyButton.classList.remove('show');\r\n    scoreElement.classList.remove('show');\r\n\r\n    setTimeout(() => {\r\n      this.score = Math.floor(Math.random() * 60) + 41; // Ensure score is between 41 and 100\r\n      scoreMessage.textContent = `Your mindfulness score is ${this.score}. Please remember that this is just a fun exercise and not a professional assessment.`;\r\n      scoreElement.textContent = `Your mindfulness score is ${this.score}.`;\r\n      loader.style.display = 'none';\r\n      printButton.classList.add('show');\r\n      newSurveyButton.classList.add('show');\r\n      scoreElement.classList.add('show');\r\n    }, 2000);\r\n  }\r\n\r\n  printSurvey() {\r\n    const modal = this.shadowRoot!.getElementById('myModal') as HTMLElement;\r\n    modal.style.display = 'none'; // Hide the modal\r\n    window.print();\r\n    modal.style.display = 'block'; // Show the modal again\r\n  }\r\n\r\n  newSurvey() {\r\n    const inputs = this.shadowRoot!.querySelectorAll('input');\r\n    inputs.forEach(input => input.value = '');\r\n    this.allAnswered = false;\r\n    const modal = this.shadowRoot!.getElementById('myModal') as HTMLElement;\r\n    modal.style.display = 'none'; // Hide the modal\r\n    const scoreElement = this.shadowRoot!.querySelector('.score') as HTMLElement;\r\n    scoreElement.classList.remove('show');\r\n  }\r\n\r\n  override render() {\r\n    return html`\r\n      <form @input=${this.checkAnswers}>\r\n        <div class=\"score\"></div>\r\n        ${this.questions.map(question => html`\r\n          <label>${question}</label>\r\n          <input type=\"text\" />\r\n        `)}\r\n        <button type=\"button\" @click=${this.showModal} ?disabled=${!this.allAnswered}>Mindfulness</button>\r\n      </form>\r\n      <div id=\"myModal\" class=\"modal\">\r\n        <div class=\"modal-content\">\r\n          <div class=\"loader\"></div>\r\n          <p id=\"scoreMessage\"></p>\r\n          <button class=\"print-button\" @click=${this.printSurvey}>Print Survey</button>\r\n          <button class=\"new-survey-button\" @click=${this.newSurvey}>New Survey</button>\r\n        </div>\r\n      </div>\r\n    `;\r\n  }\r\n}\r\n\r\ndeclare global {\r\n  interface HTMLElementTagNameMap {\r\n    'survey-component': SurveyComponent;\r\n  }\r\n}"]}